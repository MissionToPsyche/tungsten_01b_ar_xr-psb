/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.13 ./public/assets/models/experiment_02.gltf -tT -o EM.tsx -r /assets/models --keepgroups --keepmeshes --keeptextures 
Files: ./public/assets/models/experiment_02.gltf [24.37MB] > experiment_02-transformed.glb [2.82MB] (88%)
*/

import * as THREE from 'three';
import { useRef, useEffect } from 'react';
import { useGLTF, useAnimations } from '@react-three/drei';
import { GLTF } from 'three-stdlib';
import { Color } from 'three';
import ThrusterParticleSystem from '../common/particle/systems/thruster/ThrusterParticleSystem.tsx';
import FactsModalTrigger from '../facts/FactsModalTrigger.tsx';

const thrusterStartingColor = new Color('#0065cb');
const thrusterEndingColor = new Color('#06307a');

type GLTFResult = GLTF & {
  nodes: {
    SolarPanelLeft1: THREE.Mesh;
    SolarPanelLeft1_1: THREE.Mesh;
    SolarPanelLeft1003: THREE.Mesh;
    SolarPanelLeft1003_1: THREE.Mesh;
    SolarPanelLeft1004: THREE.Mesh;
    SolarPanelLeft1004_1: THREE.Mesh;
    Cube001: THREE.Mesh;
    Icosphere: THREE.Mesh;
    PanelFrameLeft: THREE.Mesh;
    PanelFrameRight: THREE.Mesh;
    Cube: THREE.Mesh;
    MagnometerCylinder: THREE.Mesh;
    DSOC_Box: THREE.Mesh;
    BottomCylinder: THREE.Mesh;
    RightSidePanels: THREE.Mesh;
    LeftSidePanels: THREE.Mesh;
    LeftSidePanels001: THREE.Mesh;
    GammaRaySpectrometer: THREE.Mesh;
    Magnetometer01: THREE.Mesh;
    Magnetometer02: THREE.Mesh;
    ThrusterFrontPart2: THREE.Mesh;
    ThrusterBackPart2: THREE.Mesh;
    ThrusterFrontPart1: THREE.Mesh;
    ThrusterBackPart1: THREE.Mesh;
    _NeutronSpectrometerPart1: THREE.Mesh;
    NeutronSpectrometerPart2: THREE.Mesh;
    MultispectralImager: THREE.Mesh;
    Obj_Cylinder001: THREE.Mesh;
    Obj_Cylinder001_1: THREE.Mesh;
    ThrusterFrontPart3: THREE.Mesh;
    ThrusterBackPart3: THREE.Mesh;
  };
  materials: {
    aluminium: THREE.MeshStandardMaterial;
    Panel_Material: THREE.MeshStandardMaterial;
    FoilMaterial: THREE.MeshStandardMaterial;
    AlumFoilBack: THREE.MeshStandardMaterial;
    PaletteMaterial002: THREE.MeshStandardMaterial;
    PaletteMaterial001: THREE.MeshStandardMaterial;
  };
};

export function CruiseOrbiter(
  props: {
    thrustersOn: boolean;
    panelsOpen: boolean;
    animatePanels: boolean;
  } & JSX.IntrinsicElements['group']
) {
  const group = useRef<THREE.Group>(null);
  const { nodes, materials, animations } = useGLTF(
    '/assets/models/cruise-orbiter-transformed.glb'
  ) as GLTFResult;
  const { actions } = useAnimations(animations, group);
  const { thrustersOn, panelsOpen, animatePanels } = props;

  useEffect(() => {
    const playAnimation = (action: THREE.AnimationAction) => {
      action.setLoop(THREE.LoopRepeat, 1);
      if (panelsOpen) {
        if (!animatePanels) {
          action.time = action.getClip().duration;
        }
      }
      action.clampWhenFinished = true;
      action.play();
    };
    if (panelsOpen) {
      playAnimation(actions.leftPanelMove as never);
      playAnimation(actions.leftOneMove as never);
      playAnimation(actions.leftTwoMove as never);
      playAnimation(actions.leftThreeMove as never);
      playAnimation(actions.leftFourMove as never);
      playAnimation(actions.leftFiveMove as never);
      playAnimation(actions.rightPanelMove as never);
      playAnimation(actions.rightOneMove as never);
      playAnimation(actions.rightTwoMove as never);
      playAnimation(actions.rightThreeMove as never);
      playAnimation(actions.rightFourMove as never);
      playAnimation(actions.rightFiveMove as never);
    }
  }, [
    actions.leftFiveMove,
    actions.leftFourMove,
    actions.leftOneMove,
    actions.leftPanelMove,
    actions.leftThreeMove,
    actions.leftTwoMove,
    actions.rightFiveMove,
    actions.rightFourMove,
    actions.rightOneMove,
    actions.rightPanelMove,
    actions.rightThreeMove,
    actions.rightTwoMove,
    panelsOpen,
    animatePanels
  ]);

  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Scene">
        <>
          <ThrusterParticleSystem
            visible={thrustersOn}
            particleStartColor={thrusterStartingColor}
            particleEndColor={thrusterEndingColor}
            position={[0, -1.25, 2.8]}
            rotation={[0, Math.PI / 2, 0]}
            count={70}
          />
          <ThrusterParticleSystem
            visible={thrustersOn}
            particleStartColor={thrusterStartingColor}
            particleEndColor={thrusterEndingColor}
            position={[0, -1.25, -2.8]}
            rotation={[0, Math.PI / 2, 0]}
            count={70}
          />
        </>
        <FactsModalTrigger factName="solarPanels">
          <group
            name="SolarPanelLeft_1"
            position={[-1.7, 0.6, 0]}
            rotation={[Math.PI / 2, -Math.PI / 2, 0]}
            scale={[0.025, 0.025, 0.015]}
          >
            <mesh
              name="SolarPanelLeft1"
              geometry={nodes.SolarPanelLeft1.geometry}
              material={materials.aluminium}
            />
            <mesh
              name="SolarPanelLeft1_1"
              geometry={nodes.SolarPanelLeft1_1.geometry}
              material={materials.Panel_Material}
            />
          </group>
          <group
            name="SolarPanelLeft_2"
            position={[-1.8, 0.6, 0]}
            rotation={[-Math.PI / 2, Math.PI / 2, 0]}
            scale={[0.025, 0.025, 0.015]}
          >
            <mesh
              name="SolarPanelLeft1"
              geometry={nodes.SolarPanelLeft1.geometry}
              material={materials.aluminium}
            />
            <mesh
              name="SolarPanelLeft1_1"
              geometry={nodes.SolarPanelLeft1_1.geometry}
              material={materials.Panel_Material}
            />
          </group>
          <group
            name="SolarPanelLeft_3"
            position={[-1.87, 0.6, 0]}
            rotation={[Math.PI / 2, -Math.PI / 2, 0]}
            scale={[0.025, 0.025, 0.015]}
          >
            <mesh
              name="SolarPanelLeft1"
              geometry={nodes.SolarPanelLeft1.geometry}
              material={materials.aluminium}
            />
            <mesh
              name="SolarPanelLeft1_1"
              geometry={nodes.SolarPanelLeft1_1.geometry}
              material={materials.Panel_Material}
            />
          </group>
          <group
            name="SolarPanelRight_1"
            position={[1.564, 0.6, 0]}
            rotation={[-Math.PI / 2, -Math.PI / 2, 0]}
            scale={[-0.025, -0.025, -0.015]}
          >
            <mesh
              name="SolarPanelLeft1"
              geometry={nodes.SolarPanelLeft1.geometry}
              material={materials.aluminium}
            />
            <mesh
              name="SolarPanelLeft1_1"
              geometry={nodes.SolarPanelLeft1_1.geometry}
              material={materials.Panel_Material}
            />
          </group>
          <group
            name="SolarPanelRight_2"
            position={[1.664, 0.6, 0]}
            rotation={[Math.PI / 2, Math.PI / 2, 0]}
            scale={[-0.025, -0.025, -0.015]}
          >
            <mesh
              name="SolarPanelLeft1"
              geometry={nodes.SolarPanelLeft1.geometry}
              material={materials.aluminium}
            />
            <mesh
              name="SolarPanelLeft1_1"
              geometry={nodes.SolarPanelLeft1_1.geometry}
              material={materials.Panel_Material}
            />
          </group>
          <group
            name="SolarPanelRight_3"
            position={[1.734, 0.6, 0]}
            rotation={[-Math.PI / 2, -Math.PI / 2, 0]}
            scale={[-0.025, -0.025, -0.015]}
          >
            <mesh
              name="SolarPanelLeft1"
              geometry={nodes.SolarPanelLeft1.geometry}
              material={materials.aluminium}
            />
            <mesh
              name="SolarPanelLeft1_1"
              geometry={nodes.SolarPanelLeft1_1.geometry}
              material={materials.Panel_Material}
            />
          </group>
          <group
            name="SolarPanelLeft_5"
            position={[-1.8, 0.6, -1.27]}
            rotation={[Math.PI / 2, -Math.PI / 2, 0]}
            scale={[0.025, 0.025, 0.015]}
          >
            <mesh
              name="SolarPanelLeft1003"
              geometry={nodes.SolarPanelLeft1003.geometry}
              material={materials.aluminium}
            />
            <mesh
              name="SolarPanelLeft1003_1"
              geometry={nodes.SolarPanelLeft1003_1.geometry}
              material={materials.Panel_Material}
            />
          </group>
          <group
            name="SolarPanelRight_5"
            position={[1.664, 0.6, -1.27]}
            rotation={[-Math.PI / 2, -Math.PI / 2, 0]}
            scale={[-0.025, -0.025, -0.015]}
          >
            <mesh
              name="SolarPanelLeft1003"
              geometry={nodes.SolarPanelLeft1003.geometry}
              material={materials.aluminium}
            />
            <mesh
              name="SolarPanelLeft1003_1"
              geometry={nodes.SolarPanelLeft1003_1.geometry}
              material={materials.Panel_Material}
            />
          </group>
          <group
            name="SolarPanelLeft_4"
            position={[-1.81, 0.6, 1.27]}
            rotation={[Math.PI / 2, -Math.PI / 2, 0]}
            scale={[0.025, 0.025, 0.015]}
          >
            <mesh
              name="SolarPanelLeft1004"
              geometry={nodes.SolarPanelLeft1004.geometry}
              material={materials.aluminium}
            />
            <mesh
              name="SolarPanelLeft1004_1"
              geometry={nodes.SolarPanelLeft1004_1.geometry}
              material={materials.Panel_Material}
            />
          </group>
          <group
            name="SolarPanelRight_4"
            position={[1.684, 0.6, 1.27]}
            rotation={[-Math.PI / 2, -Math.PI / 2, 0]}
            scale={[-0.025, -0.025, -0.015]}
          >
            <mesh
              name="SolarPanelLeft1004"
              geometry={nodes.SolarPanelLeft1004.geometry}
              material={materials.aluminium}
            />
            <mesh
              name="SolarPanelLeft1004_1"
              geometry={nodes.SolarPanelLeft1004_1.geometry}
              material={materials.Panel_Material}
            />
          </group>
        </FactsModalTrigger>
        <mesh
          name="Cube001"
          geometry={nodes.Cube001.geometry}
          material={materials.FoilMaterial}
          position={[-0.063, 0.797, 0.033]}
          scale={1.55}
        />
        <mesh
          name="Icosphere"
          geometry={nodes.Icosphere.geometry}
          material={materials.aluminium}
          position={[-0.331, 3.22, 0.423]}
          scale={[2.134, 1.48, 2.078]}
        />
        <mesh
          name="PanelFrameLeft"
          geometry={nodes.PanelFrameLeft.geometry}
          material={materials.aluminium}
          position={[-1.67, 2.2, 0]}
          rotation={[0, 0, -Math.PI / 2]}
          scale={[0.03, 0.015, 1.26]}
        />
        <mesh
          name="PanelFrameRight"
          geometry={nodes.PanelFrameRight.geometry}
          material={materials.aluminium}
          position={[1.534, 2.2, 0]}
          rotation={[Math.PI, 0, -Math.PI / 2]}
          scale={[-0.03, -0.015, -1.26]}
        />
        <mesh
          name="Cube"
          geometry={nodes.Cube.geometry}
          material={materials.AlumFoilBack}
          position={[-0.084, 3.18, -1.092]}
          scale={[1.455, 1.402, 1.456]}
        />
        <mesh
          name="MagnometerCylinder"
          geometry={nodes.MagnometerCylinder.geometry}
          material={materials.PaletteMaterial002}
          position={[1.255, 2.402, -1.389]}
          rotation={[1.572, 0.966, 3.134]}
          scale={[-0.036, -0.035, -0.035]}
        />
        <mesh
          name="DSOC_Box"
          geometry={nodes.DSOC_Box.geometry}
          material={materials.FoilMaterial}
          position={[-0.981, 1.278, 1.415]}
          rotation={[0.402, 0.762, 0.04]}
          scale={[0.051, 0.059, 0.051]}
        />
        <mesh
          name="BottomCylinder"
          geometry={nodes.BottomCylinder.geometry}
          material={materials.PaletteMaterial001}
          position={[0.028, -0.818, 0.04]}
          rotation={[-Math.PI / 2, 0, 0]}
          scale={0.034}
        />
        <mesh
          name="RightSidePanels"
          geometry={nodes.RightSidePanels.geometry}
          material={materials.PaletteMaterial002}
          position={[1.495, 0.621, 0.711]}
          rotation={[0, -Math.PI / 2, 0]}
          scale={0.034}
        />
        <mesh
          name="LeftSidePanels"
          geometry={nodes.LeftSidePanels.geometry}
          material={materials.PaletteMaterial002}
          position={[-1.628, 0.621, 0.711]}
          rotation={[0, -Math.PI / 2, 0]}
          scale={0.034}
        />
        <mesh
          name="LeftSidePanels001"
          geometry={nodes.LeftSidePanels001.geometry}
          material={materials.PaletteMaterial001}
          position={[-1.524, 0.971, 0.711]}
          rotation={[0, -Math.PI / 2, 0]}
          scale={0.034}
        />
        <mesh
          name="GammaRaySpectrometer"
          geometry={nodes.GammaRaySpectrometer.geometry}
          material={materials.PaletteMaterial002}
          position={[-1.352, 4.62, -1.424]}
          rotation={[-Math.PI, 0, -Math.PI]}
          scale={0.034}
        />
        <mesh
          name="Magnetometer01"
          geometry={nodes.Magnetometer01.geometry}
          material={materials.PaletteMaterial002}
          position={[1.251, 4.75, -1.422]}
          rotation={[-Math.PI, 0, -Math.PI]}
          scale={0.034}
        />
        <mesh
          name="Magnetometer02"
          geometry={nodes.Magnetometer02.geometry}
          material={materials.PaletteMaterial002}
          position={[1.251, 4.291, -1.422]}
          rotation={[-Math.PI, 0, -Math.PI]}
          scale={0.034}
        />
        <mesh
          name="ThrusterFrontPart2"
          geometry={nodes.ThrusterFrontPart2.geometry}
          material={materials.PaletteMaterial002}
          position={[0.078, -0.516, 2.546]}
          rotation={[-1.789, 0, -Math.PI]}
          scale={[-0.034, 0.034, 0.034]}
        />
        <mesh
          name="ThrusterBackPart2"
          geometry={nodes.ThrusterBackPart2.geometry}
          material={materials.PaletteMaterial002}
          position={[0.077, -0.516, -2.462]}
          rotation={[-1.353, 0, 0]}
          scale={[-0.034, 0.034, 0.034]}
        />
        <mesh
          name="ThrusterFrontPart1"
          geometry={nodes.ThrusterFrontPart1.geometry}
          material={materials.PaletteMaterial002}
          position={[0.08, -0.373, 1.624]}
          rotation={[-Math.PI, 0, -Math.PI]}
          scale={[-0.034, 0.034, 0.034]}
        />
        <mesh
          name="ThrusterBackPart1"
          geometry={nodes.ThrusterBackPart1.geometry}
          material={materials.PaletteMaterial002}
          position={[0.074, -0.373, -1.54]}
          scale={[-0.034, 0.034, 0.034]}
        />
        <mesh
          name="_NeutronSpectrometerPart1"
          geometry={nodes._NeutronSpectrometerPart1.geometry}
          material={materials.PaletteMaterial002}
          position={[-1.348, 5.322, -1.427]}
          rotation={[-Math.PI, 0, -Math.PI]}
          scale={0.034}
        />
        <mesh
          name="NeutronSpectrometerPart2"
          geometry={nodes.NeutronSpectrometerPart2.geometry}
          material={materials.PaletteMaterial002}
          position={[-1.347, 5.174, -1.51]}
          rotation={[-Math.PI / 2, 0, 0]}
          scale={0.034}
        />
        <mesh
          name="MultispectralImager"
          geometry={nodes.MultispectralImager.geometry}
          material={materials.PaletteMaterial002}
          position={[0.129, 1.778, -1.597]}
          rotation={[-Math.PI, 0, -Math.PI]}
          scale={0.034}
        />
        <group
          name="SIgnalCylinder"
          position={[-0.845, 2.788, 2.202]}
          rotation={[-1.172, 0, Math.PI / 4]}
          scale={0.041}
        >
          <mesh
            name="Obj_Cylinder001"
            geometry={nodes.Obj_Cylinder001.geometry}
            material={materials.PaletteMaterial002}
          />
          <mesh
            name="Obj_Cylinder001_1"
            geometry={nodes.Obj_Cylinder001_1.geometry}
            material={materials.PaletteMaterial002}
          />
        </group>
        <mesh
          name="ThrusterFrontPart3"
          geometry={nodes.ThrusterFrontPart3.geometry}
          material={materials.PaletteMaterial002}
          position={[0.078, -0.51, 2.544]}
          rotation={[-1.789, 0, Math.PI]}
          scale={[-0.034, 0.034, 0.034]}
        />
        <mesh
          name="ThrusterBackPart3"
          geometry={nodes.ThrusterBackPart3.geometry}
          material={materials.PaletteMaterial002}
          position={[0.077, -0.51, -2.46]}
          rotation={[-1.353, 0, 0]}
          scale={[-0.034, 0.034, 0.034]}
        />
      </group>
    </group>
  );
}
useGLTF.preload('/assets/models/cruise-orbiter-transformed.glb');
