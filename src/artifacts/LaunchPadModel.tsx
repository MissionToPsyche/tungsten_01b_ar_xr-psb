/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.13 ./public/assets/models/lp.gltf -tT -o LP.tsx -r /assets/models --keepgroups --keepmeshes 
Files: ./public/assets/models/lp.gltf [16.82MB] > lp-transformed.glb [1.35MB] (92%)
*/

import * as THREE from 'three';
import { useGLTF } from '@react-three/drei';
import { GLTF } from 'three-stdlib';

type GLTFResult = GLTF & {
  nodes: {
    Object_5: THREE.Mesh;
    Object_6: THREE.Mesh;
    Cube001: THREE.Mesh;
    Cube003: THREE.Mesh;
    Cube007: THREE.Mesh;
    Cube004: THREE.Mesh;
    Cube009: THREE.Mesh;
    Cube013: THREE.Mesh;
    Cube010: THREE.Mesh;
    Cube005: THREE.Mesh;
    Cube011: THREE.Mesh;
    Cube014: THREE.Mesh;
    Cube006: THREE.Mesh;
    Cube008: THREE.Mesh;
    Cube012: THREE.Mesh;
    Cube015: THREE.Mesh;
    Cube016: THREE.Mesh;
  };
  materials: {
    metal: THREE.MeshStandardMaterial;
    ground: THREE.MeshStandardMaterial;
    ['Material.002']: THREE.MeshStandardMaterial;
    ['Material.001']: THREE.MeshStandardMaterial;
  };
};

export function LaunchPadModel(props: JSX.IntrinsicElements['group']) {
  const { nodes, materials } = useGLTF(
    '/assets/models/launch-pad-model-transformed.glb'
  ) as GLTFResult;

  const minScaleFactor = 0.4;
  const maxScaleFactor = 0.5;
  const isMobile = innerWidth < 768;
  const screenWidth = window.innerWidth;
  console.log(screenWidth / 100);

  return (
    <group
      {...props}
      dispose={null}
      position={isMobile ? [-0.5, -6, 0] : [0, -6, 0]}
      scale={isMobile ? minScaleFactor : maxScaleFactor}
    >
      <group>
        <spotLight
          intensity={0.3}
          position={[-17, 20, 9]}
          color={'lightyellow'}
        />
        <spotLight
          intensity={0.3}
          position={[16, 20, 9]}
          color={'lightyellow'}
        />
        <spotLight
          intensity={0.3}
          position={[-16, 20, -9]}
          color={'lightyellow'}
        />
        <spotLight
          intensity={0.3}
          position={[14, 20, -9]}
          color={'lightyellow'}
        />
        <mesh
          geometry={nodes.Object_5.geometry}
          material={materials.metal}
          position={[0, -1.644, 0]}
          rotation={[-Math.PI / 2, 0, 0]}
          scale={[0.026, 0.026, 0.025]}
        />
        <mesh
          geometry={nodes.Object_6.geometry}
          material={materials.metal}
          position={[0, -1.065, 0]}
          rotation={[-Math.PI / 2, 0, 0]}
          scale={[0.026, 0.026, 0.025]}
        />
        <mesh
          geometry={nodes.Cube001.geometry}
          material={materials.metal}
          position={[4.134, 2.666, -0.022]}
          scale={[3.071, 1.06, 2.161]}
        />
        <mesh
          geometry={nodes.Cube003.geometry}
          material={materials.ground}
          position={[0, -0.363, 0]}
          scale={[15, 2, 12]}
        />
        <mesh
          geometry={nodes.Cube007.geometry}
          material={materials['Material.002']}
          position={[-11.895, 8.328, -8.695]}
          rotation={[-0.363, 0.755, 1.826]}
          scale={[-0.669, -0.69, -0.155]}
        />
        <mesh
          geometry={nodes.Cube004.geometry}
          material={materials['Material.002']}
          position={[-11.895, 8.328, 8.62]}
          rotation={[0.363, -0.755, -1.316]}
          scale={[0.669, 0.69, 0.155]}
        />
        <mesh
          geometry={nodes.Cube009.geometry}
          material={materials['Material.002']}
          position={[11.686, 8.328, -8.695]}
          rotation={[2.778, 0.755, 1.826]}
          scale={[0.669, 0.69, 0.155]}
        />
        <mesh
          geometry={nodes.Cube013.geometry}
          material={materials['Material.002']}
          position={[11.686, 8.328, 8.62]}
          rotation={[-2.778, -0.755, -1.316]}
          scale={[-0.669, -0.69, -0.155]}
        />
        <mesh
          geometry={nodes.Cube010.geometry}
          material={materials.ground}
          position={[-11.707, 2.125, -8.997]}
          scale={[0.516, 2.12, 0.67]}
        />
        <mesh
          geometry={nodes.Cube005.geometry}
          material={materials.ground}
          position={[-11.707, 2.125, 8.922]}
          rotation={[0, 0, -Math.PI]}
          scale={[-0.516, -2.12, -0.67]}
        />
        <mesh
          geometry={nodes.Cube011.geometry}
          material={materials.ground}
          position={[11.499, 2.125, -8.997]}
          rotation={[-Math.PI, 0, 0]}
          scale={[-0.516, -2.12, -0.67]}
        />
        <mesh
          geometry={nodes.Cube014.geometry}
          material={materials.ground}
          position={[11.499, 2.125, 8.922]}
          rotation={[-Math.PI, 0, -Math.PI]}
          scale={[0.516, 2.12, 0.67]}
        />
        <mesh
          geometry={nodes.Cube006.geometry}
          material={materials.metal}
          position={[-11.763, 5.829, -8.996]}
          rotation={[0, Math.PI / 4, 0]}
          scale={[0.13, 0.729, 0.243]}
        />
        <mesh
          geometry={nodes.Cube008.geometry}
          material={materials.metal}
          position={[-11.763, 5.829, 8.922]}
          rotation={[0, -Math.PI / 4, -Math.PI]}
          scale={[-0.13, -0.729, -0.243]}
        />
        <mesh
          geometry={nodes.Cube012.geometry}
          material={materials.metal}
          position={[11.554, 5.829, -8.996]}
          rotation={[-Math.PI, Math.PI / 4, 0]}
          scale={[-0.13, -0.729, -0.243]}
        />
        <mesh
          geometry={nodes.Cube015.geometry}
          material={materials.metal}
          position={[11.554, 5.829, 8.922]}
          rotation={[Math.PI, -Math.PI / 4, Math.PI]}
          scale={[0.13, 0.729, 0.243]}
        />
        <mesh
          geometry={nodes.Cube016.geometry}
          material={materials['Material.001']}
          position={[0, -3.238, 0]}
          scale={[25, 1, 25]}
        />
      </group>
    </group>
  );
}

useGLTF.preload('/assets/models/launch-pad-model-transformed.glb');
