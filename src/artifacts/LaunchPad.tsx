/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.13 ./launch-pad.gltf -tsT -o LaunchPad.tsx -r /assets/models 
Files: ./launch-pad.gltf [160.77KB] > launch-pad-transformed.glb [8.01KB] (95%)
*/

import * as THREE from 'three';
import { useGLTF } from '@react-three/drei';
import { GLTF } from 'three-stdlib';

type GLTFResult = GLTF & {
  nodes: {
    Base: THREE.Mesh;
    Cube001: THREE.Mesh;
    Cylinder: THREE.Mesh;
    Cube003: THREE.InstancedMesh;
    Cube011: THREE.InstancedMesh;
  };
  materials: {
    Material: THREE.MeshStandardMaterial;
    ['Material.001']: THREE.MeshStandardMaterial;
    ['Material.002']: THREE.MeshStandardMaterial;
  };
};

export function LaunchPad(props: JSX.IntrinsicElements['group']) {
  const { nodes, materials } = useGLTF(
    '/assets/models/launch-pad-transformed.glb'
  ) as GLTFResult;
  return (
    <group {...props} dispose={null}>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Base.geometry}
        material={materials.Material}
        position={[0, 0.998, 0]}
        scale={[6.016, 1.207, 6.016]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube001.geometry}
        material={materials['Material.001']}
        position={[1.506, 1.372, 0]}
        scale={[1.441, 0.065, 0.794]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cylinder.geometry}
        material={materials['Material.002']}
        position={[-1.569, 1.097, 1.863]}
        scale={0.093}
      />
      <instancedMesh
        args={[nodes.Cube003.geometry, nodes.Cube003.material, 32]}
        castShadow
        receiveShadow
        instanceMatrix={nodes.Cube003.instanceMatrix}
      />
      <instancedMesh
        args={[nodes.Cube011.geometry, materials['Material.002'], 24]}
        castShadow
        receiveShadow
        instanceMatrix={nodes.Cube011.instanceMatrix}
      />
    </group>
  );
}

useGLTF.preload('/assets/models/launch-pad-transformed.glb');
